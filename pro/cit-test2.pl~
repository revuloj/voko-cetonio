/* -*- Mode: Prolog -*- */
%:- module(citajho_servo,  [  ]).
:- use_module(library(http/thread_httpd)).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_server_files)).
:- use_module(library(http/http_files)).
:- use_module(library(http/http_parameters)). % reading post data
:- use_module(library(http/http_session)).
:- use_module(library(http/json)).
:- use_module(library(http/http_json)).
:- use_module(library(http/http_header)).

:- use_module(library(http/http_path)).
:- use_module(library(http/html_write)).
:- use_module(library(http/http_open)).
:- use_module(library(settings)).
:- use_module(library(xpath)).

:- multifile http:location/3.
:- dynamic   http:location/3.

% TODO: is http/http_error autoloaded?
% see http://www.swi-prolog.org/pldoc/man?section=http-debug

:- use_module(library(debug)).
%%%%%%%%:- use_module(agordo).
%%%%:- use_module(redaktilo_auth).
:- use_module(ekzfnt).

:- debug(http(request)).
:- debug(sercho(what)).
:- debug(sercho(stats)).
%:- debug(openid(_)).

port(9090).

% aktuale la demono malŝaltas protokoladon per "debug"
% kaj ŝalto per komandlinio ne funkcias...
thread_init :-   debug(http(request))
%    debug(openid(ax)), % yadis, authenticate, verify, resolve, check_authentication, crypt, associate...
.

:- initialization(init).
:- initialization(main,main).
%%%%%%%%%%%%%%%%:- thread_initialization(thread_init).

init :-
    set_prolog_flag(encoding,utf8),
    set_setting(http:prefix,'/citajhoj'),
    set_setting(http:public_scheme,http),
    port(Port),
    set_setting(http:public_port,Port),
    set_setting(http:public_host,localhost),
    http_set_session_options([
	cookie(redaktilo_seanco),
	timeout(3600),
	path('/citajhoj')
	])
    .

% redirect from / to /citajhoj/, when behind a proxy, this is a task for the proxy
:- http_handler('/', http_redirect(moved,root(.)),[]).
:- http_handler(root(citajho_sercho), citajho_sercho, []).
main :- port(Port), http_server(http_dispatch, [port(Port),workers(10)]), test(100),prolog.


/*******************************************/

test(Max) :- test(Max,Max).

test(Max,T) :-
    T>0,
    N is Max-T+1,
    format('>>> TEST ~d <<<~n',[N]),
    http_request('kepleraj leĝoj'),
    T1 is T-1,
    test(Max,T1).

test(_,0).    
    

http_request(Text) :-
%%    agordo:get_config([http_cit_scheme(CitScheme),http_cit_host(CitHost),http_cit_port(CitPort),http_cit_root(CitRoot)]),
%%    atom_concat(CitRoot,'/citajho_sercho',Path),
    Kie=klasikaj,
    port(Port),
    uri_authority_components(Auth,uri_authority(_,_,localhost,Port)),
    uri_query_components(Search,[sercho(Text),kie(Kie)]),
    uri_components(Url,uri_components(http,Auth,'/citajhoj/citajho_sercho',Search,_)),
    http_open(Url,Stream,[header(content_type,ContentType)]),
    format('Content-type: ~w~n~n',[ContentType]),
    set_stream(Stream,encoding(utf8)),
    read_stream_to_codes(Stream,C),
    length(C,L),
    format('got ~d bytes from HTTP request~n',[L]),
%    set_stream(current_output,encoding(utf8)),
%    copy_stream_data(Stream,current_output),
    close(Stream).


citajho_sercho(Request) :-
%%    ajax_auth(Request),
    debug(redaktilo(auth),'permesite',[]),
    http_parameters(Request,
	    [
	    sercho(Sercho, [length>1,length<500]),
	    kie(Kie, [oneof([vikipedio,anaso,klasikaj,postaj])]) 
	    ]),
    sercho(Kie,Sercho).


sercho(klasikaj,Sercho) :-
    % format('Content-type: application/json~n~n'),
    (sub_atom(Sercho,_,1,_,' ')
      ->
	  % ne komplete stabila kun versio 7.2 de SWI:
	  debug(sercho(what),'>>> KLASIKAJ: ~w',[Sercho]),
	  show_stats,
	  time(findsmart_concurrent(50,klasikaj,Sercho,Json)),
	  show_stats,
	  debug(sercho(what),'<<< KLASIKAJ: ~w',[Sercho]) 
	  %%% findsmart(50,klasikaj,Sercho,Json)		      
      ;
      findfast(50,klasikaj,Sercho,Json)),
    reply_json(Json).





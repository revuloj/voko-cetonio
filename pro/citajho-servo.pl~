/* -*- Mode: Prolog -*- */
:- module(redaktilo_servo,
	  [ server/1			% +Port
	  ]).
:- use_module(library(http/thread_httpd)).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_server_files)).
:- use_module(library(http/http_files)).
:- use_module(library(http/http_parameters)). % reading post data
:- use_module(library(http/http_session)).
:- use_module(library(http/json)).
:- use_module(library(http/http_json)).
:- use_module(library(http/http_header)).
:- use_module(library(http/http_unix_daemon)).
:- use_module(library(http/http_openid)).
:- use_module(library(http/http_path)).
:- use_module(library(http/html_write)).
:- use_module(library(http/http_open)).
:- use_module(library(settings)).
:- use_module(library(xpath)).

:- multifile http:location/3.
:- dynamic   http:location/3.

% TODO: is http/http_error autoloaded?
% see http://www.swi-prolog.org/pldoc/man?section=http-debug

:- use_module(library(debug)).

% difinu la aplikaĵon "redaktilo"
/***
:- use_module(redaktilo:library(pengines)).
:- use_module(redaktilo:redaktilo).
***/
:- use_module(agordo).
:- use_module(redaktilo).
:- use_module(redaktilo_auth).
:- use_module(sendo).
:- use_module(sqlrevo).
:- use_module(xml_quote).
:- use_module(xslt_trf).
:- use_module(ekzfnt).
:- use_module(relaxng).

:- debug(redaktilo(_)).
:- debug(http(request)).
:- debug(openid(_)).
:- debug(sendo).

% aktuale la demono malŝaltas protokoladon per "debug"
% kaj ŝalto per komandlinio ne funkcias...
thread_init :-
    debug(redaktilo(_)),
    debug(http(request)),
    debug(openid(ax)), % yadis, authenticate, verify, resolve, check_authentication, crypt, associate...
    debug(sendo).

:- initialization(init).
:- thread_initialization(thread_init).

init :-
    set_prolog_flag(encoding,utf8),
    agordo:get_config([
	 http_app_root(AppRoot),
	 web_dir(WebDir),
	 voko_dir(VokoDir),
	 http_app_scheme(Scheme),
	 http_app_host(Host),
	 http_app_port(Port),
	 http_session_timeout(Timeout)
	]),
    set_setting(http:prefix,AppRoot),
    set_setting(http:public_scheme,Scheme),
    set_setting(http:public_port,Port),
    set_setting(http:public_host,Host),
    http_set_session_options([
	cookie(redaktilo_seanco),
	timeout(Timeout),
	path(AppRoot)
	]),
    % la lokaj dosierujoj el kiuj servi dosierojn
    assert(user:file_search_path(web,WebDir)),
    assert(user:file_search_path(static,web(static))),
    assert(user:file_search_path(voko,VokoDir)),
    assert(user:file_search_path(cfg,voko(cfg))),
    assert(user:file_search_path(stl,voko(stl))),
    assert(user:file_search_path(smb,voko(smb))).

		  
http:location(red,root(red),[]).
http:location(static,root(static),[]).
%http:location(reg,root(reg),[]).
%http:location(fono,root(fono),[]).

% redirect from / to /redaktilo/red, when behind a proxy, this is a task for the proxy
:- http_handler('/', http_redirect(moved,root(red)),[]).
:- http_handler(root(.), http_redirect(moved,root('red/')),[]).
:- http_handler(red(.), reply_files, [prefix, authentication(openid)]).
:- http_handler(static(.), reply_static_files, [prefix]).

% openid-paĝoj
%:- http_handler(openid(login), revo_login, []).
%:- http_handler(openid(verify), openid_verify([ax([email(_,[])])]), [priority(10)]).
%%%:- http_handler(openid(authenticate), openid_auth, []).

% registro-paĝoj
%:- http_handler(reg(revo_registro), revo_registro, []).
%:- http_handler(reg(revo_registro1), revo_registro1, []).

%:- http_handler('/voko', http_reply_from_files('/home/revo/voko/cfg', []), [prefix]).
:- http_handler(red(revo_preflng), revo_preflng, [authentication(ajaxid)]).
:- http_handler(red(revo_artikolo), revo_artikolo, [authentication(ajaxid)]).
:- http_handler(red(revo_sendo), revo_sendo, [authentication(ajaxid)]).
:- http_handler(red(revo_sercho), revo_sercho, [authentication(ajaxid)]).
:- http_handler(red(revo_kontrolo), revo_kontrolo, [authentication(ajaxid)]).
:- http_handler(red(revo_rigardo), revo_rigardo, [authentication(ajaxid)]).
%:- http_handler(red(revo_bibliogr), revo_bibliogr, []).
:- http_handler(red(citajho_sercho), citajho_sercho, [authentication(ajaxid)]).

% http:location(img, root(img), []).
%user:file_search_path(voko,'../cfg').
:- http_handler(root(voko), serve_files_in_directory(cfg), [prefix]).

%user:file_search_path(stl,'../stl').
:- http_handler(root(stl), serve_files_in_directory(stl), [prefix]).

%user:file_search_path(smb,'../smb).
:- http_handler(root(smb), serve_files_in_directory(smb), [prefix]).

server(Port) :-
    http_server(http_dispatch, [port(Port),workers(10)]).

daemon :-
    http_daemon.

/*******************************************/

entry_no_cache(Request) :-
  member(path(Path),Request),
  sub_atom(Path,_,1,0,'/'),
  writeln('Cache-Control: no-cache, no-store,  must-revalidate'),
  writeln('Pragma: no-cache'),
  writeln('Expires: 0'), !.

entry_no_cache(_).

reply_files(Request) :-
    % evitu reveni al saluto-paĝo ĉiam denove
%%%   %%% entry_no_cache(Request),

%%    page_auth(Request),
    
    debug(redaktilo(request),'handler reply_files',[]),
    http_reply_from_files(web(.), [indexes(['redaktilo.html'])], Request).

reply_static_files(Request) :-
    % ne protektitaj publikaj dosieroj
    debug(redaktilo(request),'handler reply_static_files',[]),
    http_reply_from_files(static(.), [indexes(['notoj-pri-versio.html'])], Request).

% preferataj lingvoj
revo_preflng(Request) :-
%%    ajax_auth(Request),
    
    once((
	member(accept_language(AccLng),Request),
	preferataj_lingvoj(AccLng,Lingvoj)
	;
	Lingvoj =''
	)),

    reply_json(Lingvoj).

% elŝutas artikolon el retavortaro.de kaj sendas al la krozilo
revo_artikolo(Request) :-
%%    ajax_auth(Request),
    
    debug(redaktilo(request),'~q',[Request]),
    % read post data
    % member(method(post), Request), !,
    http_parameters(Request,
		   [art(Art, [length>0,length<50])]),
    debug(redaktilo(request),'art=~q',[Art]),
    
    % check data/input parameters...
    check_param_all(Art,csym),
    check_param_all(Art,ascii),

    % legu artikolon
    redaktilo:xml_stream(Art,XmlStream,Status),
    (Status = 200
     ->
	 set_stream(XmlStream,encoding(utf8)),
	 set_stream(current_output,encoding(utf8)),
	 format('Content-type: text/plain; charset=UTF-8~n~n'),
	 %copy_stream_data(XmlStream,current_output),
	 redaktilo:unquote_stream(XmlStream,current_output),
	 close(XmlStream)
     ;
     format('Status: ~d~n~n',[Status])
     ).


		      
% serĉas en la sql-datumbazo laŭ kapvorto-komenco kaj redonas
% informojn (marko, senco k.s. wn formo JSON 
revo_sercho(Request) :-
%%    ajax_auth(Request),

    (
	debug(redaktilo(request),'~q',[Request]),
	% read post data
	% member(method(post), Request), !,
	http_parameters(Request,
		    [
			lng(Lng,[ oneof([eo]) ]),
			sercho(Sercho,[length>0,length<100])
		    ]),
	debug(redaktilo(request),'lng=~q, sercho=~q',[Lng,Sercho]),

	% validate params
	Lng=eo,
	check_param_none(Sercho,cntrl),
	check_param_none(Sercho,quote),
	check_param_none(Sercho,punct,[0'-]),
	
	set_stream(current_output,encoding(utf8)),
	
	% format('Content-type: application/json~n~n'),
	findall(Json,sqlrevo:search_eo_json(Sercho,Json),ResultList)
	       % debug(redaktilo(request),'json=~q',[ResultList]),
	       % json_write(current_output,ResultList).
        -> reply_json(ResultList)
        ;
	format('Status: ~d~n~n',[400])
    ).


% forsendas artikolon senditan de la krozilo per retpoŝto
revo_sendo(Request) :-
%%    ajax_auth(Request),
    
    debug(redaktilo(request),'~q',[Request]),
    % read post data
    http_parameters(Request,
		    [
			shangho(Shangho_au_Nomo, [length>1,length<500]),
			redakto(Redakto, [oneof([redakto,aldono]),default(redakto)]),
			xml(Xml, [length>100,length<500000]) % plej granda aktuale 107kB (ten.xml)
		    ]),
    http_session_data(retadreso(Retadreso)),
    debug(redaktilo(request),'shangho=~q',[Shangho_au_Nomo]),

    % kodigu specialajn literojn ktp. per unuoj
    get_entity_index(ReverseEntInx,_EntValLenInx,EntVal1Inx),
    atom_codes(Xml,Codes),
    xml_quote_cdata(Codes,Quoted,ReverseEntInx,EntVal1Inx,utf8),

    % respondu kaj sendu
    format('Content-type: text/html~n~n'),
    % FIXME: pli bone havu apartan funkcion por sendi novan artikolon?
    once((
	Redakto = redakto,
	send_revo_redakto(Retadreso,Shangho_au_Nomo,Quoted)
	;
	Redakto = aldono,
	send_revo_aldono(Retadreso,Shangho_au_Nomo,Quoted)
	;
	%format('Status: ~d~n~n',[401]),
	throw(http_reply(html(['Neatendita eraro dum forsendo.\n'])))
    )),
    format('Bone. Sendita.').

% sintaks-kontrolo de la artikolo per Jing
revo_kontrolo(Request) :-
%%    ajax_auth(Request),
    
    debug(redaktilo(request),'~q',[Request]),
    % read post data
    http_parameters(Request,
		    [
			xml(Xml, [length>100,length<500000]) % plej granda aktuale 107kB (ten.xml)
		    ]),
    relaxng_json(Xml,Json),
    reply_json(Json).


% HTML-antaurigardo de la artikolo
revo_rigardo(Request) :-
%%    ajax_auth(Request),
    
    debug(redaktilo(request),'~q',[Request]),
    % read post data
    http_parameters(Request,
		    [
			xml(Xml, [length>100,length<500000]) % plej granda aktuale 107kB (ten.xml)
		    ]),
    get_entity_index(ReverseEntInx,_EntValLenInx,EntVal1Inx),
    atom_codes(Xml,Codes),
    xml_quote_cdata(Codes,Quoted,ReverseEntInx,EntVal1Inx,utf8),
    % Quoted -> HTML
    atom_codes(XmlAtom,Quoted),
    %format('Content-type: text/html~n~n'),
    catch(
	    (
		agordo:get_config(voko_xsl,VokoXsl),
		xsl_transform(XmlAtom,VokoXsl,Out),
		format('Content-type: text/html~n~n'),
		write(Out)
	    ),
	    error(java_exception(Exc),Class), % java_exception( classname, reference_to_exception_object),
	    (
		xsl_exception(Exc,Text),
		debug(redaktilo(rigardo),'~q: ~q',[Class,Text]),
		% format('Content-type: text/plain~n~n'),
		format('Status: ~d~n~n',[400]),
		write(Text)
	    )
	).


citajho_sercho(Request) :-
%%    ajax_auth(Request),
    
    http_parameters(Request,
	    [
	    sercho(Sercho, [length>1,length<500]),
	    kie(Kie, [oneof([vikipedio,anaso,klasikaj,postaj])]) 
	    ]),
    sercho(Kie,Sercho).


% API doc: https://en.wikipedia.org/w/api.php?action=help&modules=query%2Bsearch
% &gsrprop=snippet - ne funkcias aŭ sama kiel extract?
% PRIPENSU: ekskludu riskajn signojn el serĉo: &, ?, / (?)

sercho(vikipedio,Sercho) :-    
    uri_encoded(query_value,Sercho,SerchoEnc),
    UrlBase = 'https://eo.wikipedia.org/w/api.php?format=json&action=query&generator=search&gsrnamespace=0&gsrlimit=50&prop=extracts&exintro&explaintext&exsentences=1&exlimit=max',
    format(atom(Url),'~w&gsrsearch=~w',[UrlBase,SerchoEnc]),
    % Url= 'http://eo.wikipedia.org/w/api.php?action=query&list=search&format=json&indexpageids=true&prop=info&inprop=url&srsearch=homo&srnamespace=0&srprop=snippet&srlimit=16',
    http_open(Url,Stream,[]),
    format('Content-type: application/json~n~n'),
    copy_stream_data(Stream,current_output),
    close(Stream).


sercho(klasikaj,Sercho) :-
    % format('Content-type: application/json~n~n'),
    (sub_atom(Sercho,_,1,_,' ')
      ->
	 findsmart(50,klasikaj,Sercho,Json)
      ;
      findfast(50,klasikaj,Sercho,Json)),
    reply_json(Json).

sercho(postaj,Sercho) :-
    % format('Content-type: application/json~n~n'),
    (sub_atom(Sercho,_,1,_,' ')
      ->
	 findsmart(50,postaj,Sercho,Json)
      ;
      findfast(50,postaj,Sercho,Json)),
    reply_json(Json).

sercho(anaso,Sercho) :-    
    uri_encoded(query_value,Sercho,SerchoEnc),
    UrlBase = 'https://duckduckgo.com/lite?ia=web&dl=eo',
    format(atom(Url),'~w&q=~w+kaj+la',[UrlBase,SerchoEnc]),
    http_open(Url,Stream,[]),
    format('Content-type: text/html~n~n'),
    set_stream(Stream,encoding(utf8)),
    set_stream(current_output,encoding(utf8)),
    copy_stream_data(Stream,current_output),
    close(Stream).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

check_param_all(Param,Type) :-
    atom_codes(Param,Codes),
    check_codes_all(Codes,Type).

check_param_none(Param,Type) :-
    atom_codes(Param,Codes),
    check_codes_none(Codes,Type).

check_param_none(Param,Type,Permitted) :-
    atom_codes(Param,Codes),
    check_codes_none(Codes,Type,Permitted).

check_codes_all([],_).
check_codes_all([C|Codes],Type) :-
    code_type(C,Type),
    check_codes_all(Codes,Type).

check_codes_none([],_).
check_codes_none([C|Codes],Type) :-
    code_type(C,Type) -> false
    ; check_codes_none(Codes,Type).

check_codes_none([],_,_).
check_codes_none([C|Codes],Type,Permitted) :-
    code_type(C,Type), \+ memberchk(C,Permitted) -> false
    ; check_codes_none(Codes,Type,Permitted).

sub_list(List,Start,Len,SubList) :-
    S_1 is Start-1,
    length(L,S_1),
    append(L,R,List),
    length(SubList,Len),
    append(SubList,_,R).

% ekz. 	'de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4,eo;q=0.2' -> [de,en]
%       'de-DE,en-GB' -> [de,en]
%       'de-DE' -> [de]
preferataj_lingvoj(AccLng,Lingvoj) :-
    atomic_list_concat(LngLst,';',AccLng),
    setof(Lingvo,
	  L^L1^Lng^(
	      member(L,LngLst),
	      atomic_list_concat(L1,',',L),
	      member(Lng,L1),
	      once((
		  atom_length(Lng,2), Lingvo = Lng
	          ;
		  atomic_list_concat([Lingvo,_Country],'-',Lng)
	      )),
	      Lingvo \= eo
	  ), Lingvoj).
